"use strict";

var _chai = require("chai");

var _lodash = _interopRequireDefault(require("lodash"));

var _moment = _interopRequireDefault(require("moment"));

var _itemUtils = require("./itemUtils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

//
// |--1--|
//          |--2--|
//   |--3--|
//       |--4--|
//     |--5--|
var allTestItems = [{
  key: '1',
  title: '1',
  color: 'blue',
  row: 1,
  start: (0, _moment["default"])('2000-01-01'),
  end: (0, _moment["default"])('2000-01-01').add(1, 'days')
}, {
  key: '2',
  title: '2',
  color: 'blue',
  row: 1,
  start: (0, _moment["default"])('2000-01-03'),
  end: (0, _moment["default"])('2000-01-03').startOf('day').add(1, 'days')
}, {
  key: '3',
  title: '3',
  color: 'blue',
  row: 1,
  start: (0, _moment["default"])('2000-01-01').add(1, 'hours'),
  end: (0, _moment["default"])('2000-01-01').add(1, 'hours').add(1, 'days')
}, {
  key: '4',
  title: '4',
  color: 'blue',
  row: 1,
  start: (0, _moment["default"])('2000-01-01').add(1, 'days'),
  end: (0, _moment["default"])('2000-01-01').add(1, 'hours').add(1, 'days')
}, {
  key: '5',
  title: '5',
  color: 'blue',
  row: 1,
  start: (0, _moment["default"])('2000-01-01').add(2, 'hours'),
  end: (0, _moment["default"])('2000-01-01').add(2, 'hours').add(1, 'days')
}];
describe('Item Utils', function () {
  describe('getMaxOverlappingItems', function () {
    it('should return a default of 1', function () {
      var result = (0, _itemUtils.getMaxOverlappingItems)([]);
      (0, _chai.expect)(result).to.equal(1);
    }); // Diagram
    //  |-----|  |----|

    it('should return 1 when no overlapping items', function () {
      var testInstanceIDs = ['1', '2'];

      var items = _lodash["default"].filter(allTestItems, function (i) {
        return _lodash["default"].includes(testInstanceIDs, i.key);
      });

      var result = (0, _itemUtils.getMaxOverlappingItems)(items);
      (0, _chai.expect)(result).to.equal(1);
    }); // Diagram
    //  |-----|
    //    |------|

    it('should return 2 when 2 items overlap', function () {
      var testInstanceIDs = ['1', '3'];

      var items = _lodash["default"].filter(allTestItems, function (i) {
        return _lodash["default"].includes(testInstanceIDs, i.key);
      });

      var result = (0, _itemUtils.getMaxOverlappingItems)(items);
      (0, _chai.expect)(result).to.equal(2);
    }); // Diagram
    //  |-----|-----|

    it('should return 1 when 2 items touch', function () {
      var testInstanceIDs = ['1', '4'];

      var items = _lodash["default"].filter(allTestItems, function (i) {
        return _lodash["default"].includes(testInstanceIDs, i.key);
      });

      var result = (0, _itemUtils.getMaxOverlappingItems)(items);
      (0, _chai.expect)(result).to.equal(1);
    }); // Diagram
    //  |-----|
    //    |------|
    //       |------|

    it('should return 3 when 3 items overlap', function () {
      var testInstanceIDs = ['1', '3', '5'];

      var items = _lodash["default"].filter(allTestItems, function (i) {
        return _lodash["default"].includes(testInstanceIDs, i.key);
      });

      var result = (0, _itemUtils.getMaxOverlappingItems)(items);
      (0, _chai.expect)(result).to.equal(3);
    }); // Diagram
    //  |-----|  |------|
    //      |------|

    it('should return 2 when 2 of 3 items overlap', function () {
      var testInstanceIDs = ['2', '3', '4'];

      var items = _lodash["default"].filter(allTestItems, function (i) {
        return _lodash["default"].includes(testInstanceIDs, i.key);
      });

      var result = (0, _itemUtils.getMaxOverlappingItems)(items);
      (0, _chai.expect)(result).to.equal(2);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9pdGVtVXRpbHMudGVzdC5qcyJdLCJuYW1lcyI6WyJhbGxUZXN0SXRlbXMiLCJrZXkiLCJ0aXRsZSIsImNvbG9yIiwicm93Iiwic3RhcnQiLCJlbmQiLCJhZGQiLCJzdGFydE9mIiwiZGVzY3JpYmUiLCJpdCIsInJlc3VsdCIsInRvIiwiZXF1YWwiLCJ0ZXN0SW5zdGFuY2VJRHMiLCJpdGVtcyIsIl8iLCJmaWx0ZXIiLCJpIiwiaW5jbHVkZXMiXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBRUE7O0FBQ0E7O0FBQ0E7Ozs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFNQSxZQUFZLEdBQUcsQ0FDbkI7QUFDRUMsRUFBQUEsR0FBRyxFQUFFLEdBRFA7QUFFRUMsRUFBQUEsS0FBSyxFQUFFLEdBRlQ7QUFHRUMsRUFBQUEsS0FBSyxFQUFFLE1BSFQ7QUFJRUMsRUFBQUEsR0FBRyxFQUFFLENBSlA7QUFLRUMsRUFBQUEsS0FBSyxFQUFFLHdCQUFPLFlBQVAsQ0FMVDtBQU1FQyxFQUFBQSxHQUFHLEVBQUUsd0JBQU8sWUFBUCxFQUFxQkMsR0FBckIsQ0FBeUIsQ0FBekIsRUFBNEIsTUFBNUI7QUFOUCxDQURtQixFQVNuQjtBQUNFTixFQUFBQSxHQUFHLEVBQUUsR0FEUDtBQUVFQyxFQUFBQSxLQUFLLEVBQUUsR0FGVDtBQUdFQyxFQUFBQSxLQUFLLEVBQUUsTUFIVDtBQUlFQyxFQUFBQSxHQUFHLEVBQUUsQ0FKUDtBQUtFQyxFQUFBQSxLQUFLLEVBQUUsd0JBQU8sWUFBUCxDQUxUO0FBTUVDLEVBQUFBLEdBQUcsRUFBRSx3QkFBTyxZQUFQLEVBQ0ZFLE9BREUsQ0FDTSxLQUROLEVBRUZELEdBRkUsQ0FFRSxDQUZGLEVBRUssTUFGTDtBQU5QLENBVG1CLEVBbUJuQjtBQUNFTixFQUFBQSxHQUFHLEVBQUUsR0FEUDtBQUVFQyxFQUFBQSxLQUFLLEVBQUUsR0FGVDtBQUdFQyxFQUFBQSxLQUFLLEVBQUUsTUFIVDtBQUlF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STtBQUN0QyxlQUFPRixtQkFBRUcsUUFBRixDQUFXTCxlQUFYLEVBQTRCSSxDQUFDLENBQUNqQixHQUE5QixDQUFQO0FBQ0QsT0FGVyxDQUFaOztBQUdBLFVBQU1VLE1BQU0sR0FBRyx1Q0FBdUJJLEtBQXZCLENBQWY7QUFDQSx3QkFBT0osTUFBUCxFQUFlQyxFQUFmLENBQWtCQyxLQUFsQixDQUF3QixDQUF4QjtBQUNELEtBUEMsQ0FBRjtBQVFELEdBM0RPLENBQVI7QUE0REQsQ0E3RE8sQ0FBUiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7ZXhwZWN0fSBmcm9tICdjaGFpJztcclxuXHJcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XHJcbmltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JztcclxuaW1wb3J0IHtnZXRNYXhPdmVybGFwcGluZ0l0ZW1zfSBmcm9tICcuL2l0ZW1VdGlscyc7XHJcblxyXG4vL1xyXG4vLyB8LS0xLS18XHJcbi8vICAgICAgICAgIHwtLTItLXxcclxuLy8gICB8LS0zLS18XHJcbi8vICAgICAgIHwtLTQtLXxcclxuLy8gICAgIHwtLTUtLXxcclxuY29uc3QgYWxsVGVzdEl0ZW1zID0gW1xyXG4gIHtcclxuICAgIGtleTogJzEnLFxyXG4gICAgdGl0bGU6ICcxJyxcclxuICAgIGNvbG9yOiAnYmx1ZScsXHJcbiAgICByb3c6IDEsXHJcbiAgICBzdGFydDogbW9tZW50KCcyMDAwLTAxLTAxJyksXHJcbiAgICBlbmQ6IG1vbWVudCgnMjAwMC0wMS0wMScpLmFkZCgxLCAnZGF5cycpXHJcbiAgfSxcclxuICB7XHJcbiAgICBrZXk6ICcyJyxcclxuICAgIHRpdGxlOiAnMicsXHJcbiAgICBjb2xvcjogJ2JsdWUnLFxyXG4gICAgcm93OiAxLFxyXG4gICAgc3RhcnQ6IG1vbWVudCgnMjAwMC0wMS0wMycpLFxyXG4gICAgZW5kOiBtb21lbnQoJzIwMDAtMDEtMDMnKVxyXG4gICAgICAuc3RhcnRPZignZGF5JylcclxuICAgICAgLmFkZCgxLCAnZGF5cycpXHJcbiAgfSxcclxuICB7XHJcbiAgICBrZXk6ICczJyxcclxuICAgIHRpdGxlOiAnMycsXHJcbiAgICBjb2xvcjogJ2JsdWUnLFxyXG4gICAgcm93OiAxLFxyXG4gICAgc3RhcnQ6IG1vbWVudCgnMjAwMC0wMS0wMScpLmFkZCgxLCAnaG91cnMnKSxcclxuICAgIGVuZDogbW9tZW50KCcyMDAwLTAxLTAxJylcclxuICAgICAgLmFkZCgxLCAnaG91cnMnKVxyXG4gICAgICAuYWRkKDEsICdkYXlzJylcclxuICB9LFxyXG4gIHtcclxuICAgIGtleTogJzQnLFxyXG4gICAgdGl0bGU6ICc0JyxcclxuICAgIGNvbG9yOiAnYmx1ZScsXHJcbiAgICByb3c6IDEsXHJcbiAgICBzdGFydDogbW9tZW50KCcyMDAwLTAxLTAxJykuYWRkKDEsICdkYXlzJyksXHJcbiAgICBlbmQ6IG1vbWVudCgnMjAwMC0wMS0wMScpXHJcbiAgICAgIC5hZGQoMSwgJ2hvdXJzJylcclxuICAgICAgLmFkZCgxLCAnZGF5cycpXHJcbiAgfSxcclxuICB7XHJcbiAgICBrZXk6ICc1JyxcclxuICAgIHRpdGxlOiAnNScsXHJcbiAgICBjb2xvcjogJ2JsdWUnLFxyXG4gICAgcm93OiAxLFxyXG4gICAgc3RhcnQ6IG1vbWVudCgnMjAwMC0wMS0wMScpLmFkZCgyLCAnaG91cnMnKSxcclxuICAgIGVuZDogbW9tZW50KCcyMDAwLTAxLTAxJylcclxuICAgICAgLmFkZCgyLCAnaG91cnMnKVxyXG4gICAgICAuYWRkKDEsICdkYXlzJylcclxuICB9XHJcbl07XHJcblxyXG5kZXNjcmliZSgnSXRlbSBVdGlscycsIGZ1bmN0aW9uKCkge1xyXG4gIGRlc2NyaWJlKCdnZXRNYXhPdmVybGFwcGluZ0l0ZW1zJywgZnVuY3Rpb24oKSB7XHJcbiAgICBpdCgnc2hvdWxkIHJldHVybiBhIGRlZmF1bHQgb2YgMScsIGZ1bmN0aW9uKCkge1xyXG4gICAgICBjb25zdCByZXN1bHQgPSBnZXRNYXhPdmVybGFwcGluZ0l0ZW1zKFtdKTtcclxuICAgICAgZXhwZWN0KHJlc3VsdCkudG8uZXF1YWwoMSk7XHJcbiAgICB9KTtcclxuICAgIC8vIERpYWdyYW1cclxuICAgIC8vICB8LS0tLS18ICB8LS0tLXxcclxuICAgIGl0KCdzaG91bGQgcmV0dXJuIDEgd2hlbiBubyBvdmVybGFwcGluZyBpdGVtcycsIGZ1bmN0aW9uKCkge1xyXG4gICAgICBsZXQgdGVzdEluc3RhbmNlSURzID0gWycxJywgJzInXTtcclxuICAgICAgbGV0IGl0ZW1zID0gXy5maWx0ZXIoYWxsVGVzdEl0ZW1zLCBpID0+IHtcclxuICAgICAgICByZXR1cm4gXy5pbmNsdWRlcyh0ZXN0SW5zdGFuY2VJRHMsIGkua2V5KTtcclxuICAgICAgfSk7XHJcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGdldE1heE92ZXJsYXBwaW5nSXRlbXMoaXRlbXMpO1xyXG4gICAgICBleHBlY3QocmVzdWx0KS50by5lcXVhbCgxKTtcclxuICAgIH0pO1xyXG4gICAgLy8gRGlhZ3JhbVxyXG4gICAgLy8gIHwtLS0tLXxcclxuICAgIC8vICAgIHwtLS0tLS18XHJcbiAgICBpdCgnc2hvdWxkIHJldHVybiAyIHdoZW4gMiBpdGVtcyBvdmVybGFwJywgKCkgPT4ge1xyXG4gICAgICBsZXQgdGVzdEluc3RhbmNlSURzID0gWycxJywgJzMnXTtcclxuICAgICAgbGV0IGl0ZW1zID0gXy5maWx0ZXIoYWxsVGVzdEl0ZW1zLCBpID0+IHtcclxuICAgICAgICByZXR1cm4gXy5pbmNsdWRlcyh0ZXN0SW5zdGFuY2VJRHMsIGkua2V5KTtcclxuICAgICAgfSk7XHJcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGdldE1heE92ZXJsYXBwaW5nSXRlbXMoaXRlbXMpO1xyXG4gICAgICBleHBlY3QocmVzdWx0KS50by5lcXVhbCgyKTtcclxuICAgIH0pO1xyXG4gICAgLy8gRGlhZ3JhbVxyXG4gICAgLy8gIHwtLS0tLXwtLS0tLXxcclxuICAgIGl0KCdzaG91bGQgcmV0dXJuIDEgd2hlbiAyIGl0ZW1zIHRvdWNoJywgKCkgPT4ge1xyXG4gICAgICBsZXQgdGVzdEluc3RhbmNlSURzID0gWycxJywgJzQnXTtcclxuICAgICAgbGV0IGl0ZW1zID0gXy5maWx0ZXIoYWxsVGVzdEl0ZW1zLCBpID0+IHtcclxuICAgICAgICByZXR1cm4gXy5pbmNsdWRlcyh0ZXN0SW5zdGFuY2VJRHMsIGkua2V5KTtcclxuICAgICAgfSk7XHJcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGdldE1heE92ZXJsYXBwaW5nSXRlbXMoaXRlbXMpO1xyXG4gICAgICBleHBlY3QocmVzdWx0KS50by5lcXVhbCgxKTtcclxuICAgIH0pO1xyXG4gICAgLy8gRGlhZ3JhbVxyXG4gICAgLy8gIHwtLS0tLXxcclxuICAgIC8vICAgIHwtLS0tLS18XHJcbiAgICAvLyAgICAgICB8LS0tLS0tfFxyXG4gICAgaXQoJ3Nob3VsZCByZXR1cm4gMyB3aGVuIDMgaXRlbXMgb3ZlcmxhcCcsICgpID0+IHtcclxuICAgICAgbGV0IHRlc3RJbnN0YW5jZUlEcyA9IFsnMScsICczJywgJzUnXTtcclxuICAgICAgbGV0IGl0ZW1zID0gXy5maWx0ZXIoYWxsVGVzdEl0ZW1zLCBpID0+IHtcclxuICAgICAgICByZXR1cm4gXy5pbmNsdWRlcyh0ZXN0SW5zdGFuY2VJRHMsIGkua2V5KTtcclxuICAgICAgfSk7XHJcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGdldE1heE92ZXJsYXBwaW5nSXRlbXMoaXRlbXMpO1xyXG4gICAgICBleHBlY3QocmVzdWx0KS50by5lcXVhbCgzKTtcclxuICAgIH0pO1xyXG4gICAgLy8gRGlhZ3JhbVxyXG4gICAgLy8gIHwtLS0tLXwgIHwtLS0tLS18XHJcbiAgICAvLyAgICAgIHwtLS0tLS18XHJcbiAgICBpdCgnc2hvdWxkIHJldHVybiAyIHdoZW4gMiBvZiAzIGl0ZW1zIG92ZXJsYXAnLCAoKSA9PiB7XHJcbiAgICAgIGxldCB0ZXN0SW5zdGFuY2VJRHMgPSBbJzInLCAnMycsICc0J107XHJcbiAgICAgIGxldCBpdGVtcyA9IF8uZmlsdGVyKGFsbFRlc3RJdGVtcywgaSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIF8uaW5jbHVkZXModGVzdEluc3RhbmNlSURzLCBpLmtleSk7XHJcbiAgICAgIH0pO1xyXG4gICAgICBjb25zdCByZXN1bHQgPSBnZXRNYXhPdmVybGFwcGluZ0l0ZW1zKGl0ZW1zKTtcclxuICAgICAgZXhwZWN0KHJlc3VsdCkudG8uZXF1YWwoMik7XHJcbiAgICB9KTtcclxuICB9KTtcclxufSk7XHJcbiJdfQ==