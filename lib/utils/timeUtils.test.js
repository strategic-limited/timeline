"use strict";

var _chai = require("chai");

var _moment = _interopRequireDefault(require("moment"));

var _timeUtils = require("./timeUtils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

describe('Time Utils', function () {
  describe('timeSnap', function () {
    it('should round up to the nearest min', function () {
      var testTime = (0, _moment["default"])('2000-01-01 9:59:50 Z', 'YYYY-MM-DD H:m:s Z');
      var expectedTime = (0, _moment["default"])('2000-01-01 10:00:00 Z', 'YYYY-MM-DD H:m:s Z');
      var snap = 60;
      var actualTime = (0, _timeUtils.timeSnap)(testTime, snap);
      (0, _chai.expect)(actualTime.unix()).to.equal(expectedTime.unix());
    });
    it('should round down to the nearest min', function () {
      var testTime = (0, _moment["default"])('2000-01-01 10:00:20 Z', 'YYYY-MM-DD H:m:s Z');
      var expectedTime = (0, _moment["default"])('2000-01-01 10:00:00 Z', 'YYYY-MM-DD H:m:s Z');
      var snap = 60;
      var actualTime = (0, _timeUtils.timeSnap)(testTime, snap);
      (0, _chai.expect)(actualTime.unix()).to.equal(expectedTime.unix());
    });
    it('should round up when at 30s (nearest min)', function () {
      var testTime = (0, _moment["default"])('2000-01-01 10:00:30 Z', 'YYYY-MM-DD H:m:s Z');
      var expectedTime = (0, _moment["default"])('2000-01-01 10:01:00 Z', 'YYYY-MM-DD H:m:s Z');
      var snap = 60;
      var actualTime = (0, _timeUtils.timeSnap)(testTime, snap);
      (0, _chai.expect)(actualTime.unix()).to.equal(expectedTime.unix());
    });
    it('should round to nearest hour', function () {
      var testTime = (0, _moment["default"])('2000-01-01 10:12:30 Z', 'YYYY-MM-DD H:m:s Z');
      var expectedTime = (0, _moment["default"])('2000-01-01 10:00:00 Z', 'YYYY-MM-DD H:m:s Z');
      var snap = 60 * 60;
      var actualTime = (0, _timeUtils.timeSnap)(testTime, snap);
      (0, _chai.expect)(actualTime.unix()).to.equal(expectedTime.unix());
    });
    it('should round to nearest hour over mid-night', function () {
      var testTime = (0, _moment["default"])('2000-01-01 23:44:40 Z', 'YYYY-MM-DD H:m:s Z');
      var expectedTime = (0, _moment["default"])('2000-01-02 00:00:00 Z', 'YYYY-MM-DD H:m:s Z');
      var snap = 60 * 60;
      var actualTime = (0, _timeUtils.timeSnap)(testTime, snap);
      (0, _chai.expect)(actualTime.unix()).to.equal(expectedTime.unix());
    });
    it('should round up to nearest day', function () {
      var testTime = (0, _moment["default"])('2000-01-01 12:44:40 Z', 'YYYY-MM-DD H:m:s Z');
      var expectedTime = (0, _moment["default"])('2000-01-02 00:00:00 Z', 'YYYY-MM-DD H:m:s Z');
      var snap = 60 * 60 * 24;
      var actualTime = (0, _timeUtils.timeSnap)(testTime, snap);
      (0, _chai.expect)(actualTime.unix()).to.equal(expectedTime.unix());
    });
    it('should round down to nearest day', function () {
      var testTime = (0, _moment["default"])('2000-01-01 11:44:40 Z', 'YYYY-MM-DD H:m:s Z');
      var expectedTime = (0, _moment["default"])('2000-01-01 00:00:00 Z', 'YYYY-MM-DD H:m:s Z');
      var snap = 60 * 60 * 24;
      var actualTime = (0, _timeUtils.timeSnap)(testTime, snap);
      (0, _chai.expect)(actualTime.unix()).to.equal(expectedTime.unix());
    });
  });
  describe('getTimeAtPixel', function () {
    it('should return start time for 0', function () {
      var visStart = (0, _moment["default"])('2000-01-01 00:00:00 Z', 'YYYY-MM-DD H:m:s Z');
      var visEnd = (0, _moment["default"])('2000-01-08 00:00:00 Z', 'YYYY-MM-DD H:m:s Z'); // 7 days

      var timelineWidth = 2000; //2000 px

      var pixelOffset = 0;
      var time = (0, _timeUtils.getTimeAtPixel)(pixelOffset, visStart, visEnd, timelineWidth);
      (0, _chai.expect)(time.unix()).to.equal(visStart.unix());
    });
    it('should return before start for -ve pixels', function () {
      var visStart = (0, _moment["default"])('2000-01-01 00:00:00 Z', 'YYYY-MM-DD H:m:s Z');
      var visEnd = (0, _moment["default"])('2000-01-08 00:00:00 Z', 'YYYY-MM-DD H:m:s Z'); // 7 days

      var timelineWidth = 2000; //2000 px

      var pixelOffset = -40;
      var time = (0, _timeUtils.getTimeAtPixel)(pixelOffset, visStart, visEnd, timelineWidth);
      (0, _chai.expect)(time.unix()).to.lt(visStart.unix());
    });
    it('should return end time for width pixels', function () {
      var visStart = (0, _moment["default"])('2000-01-01 00:00:00 Z', 'YYYY-MM-DD H:m:s Z');
      var visEnd = (0, _moment["default"])('2000-01-08 00:00:00 Z', 'YYYY-MM-DD H:m:s Z'); // 7 days

      var timelineWidth = 2000; //2000 px

      var pixelOffset = 2000;
      var time = (0, _timeUtils.getTimeAtPixel)(pixelOffset, visStart, visEnd, timelineWidth);
      (0, _chai.expect)(time.unix()).to.equal(visEnd.unix());
    });
    it('should return higher than width for over width pixels', function () {
      var visStart = (0, _moment["default"])('2000-01-01 00:00:00 Z', 'YYYY-MM-DD H:m:s Z');
      var visEnd = (0, _moment["default"])('2000-01-08 00:00:00 Z', 'YYYY-MM-DD H:m:s Z'); // 7 days

      var timelineWidth = 2000; //2000 px

      var pixelOffset = 2400;
      var time = (0, _timeUtils.getTimeAtPixel)(pixelOffset, visStart, visEnd, timelineWidth);
      (0, _chai.expect)(time.unix()).to.gt(visEnd.unix());
    });
    it('should return correct fraction of time for given pixel location', function () {
      var visStart = (0, _moment["default"])('2000-01-01 00:00:00 Z', 'YYYY-MM-DD H:m:s Z');
      var visEnd = (0, _moment["default"])('2000-01-08 00:00:00 Z', 'YYYY-MM-DD H:m:s Z'); // 7 days

      var timelineWidth = 2100; //2000 px

      var pixelOffset = 300;
      var expectedTime = visStart.clone().add(pixelOffset / timelineWidth * 7, 'days');
      var time = (0, _timeUtils.getTimeAtPixel)(pixelOffset, visStart, visEnd, timelineWidth);
      (0, _chai.expect)(time.unix()).to.equal(expectedTime.unix());
    });
  });
  describe('getPixelAtTime', function () {
    it('should return 0 for start time', function () {
      var visStart = (0, _moment["default"])('2000-01-01 00:00:00 Z', 'YYYY-MM-DD H:m:s Z');
      var visEnd = (0, _moment["default"])('2000-01-08 00:00:00 Z', 'YYYY-MM-DD H:m:s Z'); // 7 days

      var timelineWidth = 2000; //2000 px

      var testTime = visStart.clone();
      var pixels = (0, _timeUtils.getPixelAtTime)(testTime, visStart, visEnd, timelineWidth);
      (0, _chai.expect)(pixels).to.equal(0);
    });
    it('should return -ve for before start time', function () {
      var visStart = (0, _moment["default"])('2000-01-01 00:00:00 Z', 'YYYY-MM-DD H:m:s Z');
      var visEnd = (0, _moment["default"])('2000-01-08 00:00:00 Z', 'YYYY-MM-DD H:m:s Z'); // 7 days

      var timelineWidth = 2000; //2000 px

      var testTime = (0, _moment["default"])('1999-12-30 00:00:00 Z', 'YYYY-MM-DD H:m:s Z');
      var pixels = (0, _timeUtils.getPixelAtTime)(testTime, visStart, visEnd, timelineWidth);
      (0, _chai.expect)(pixels).to.lt(0);
    });
    it('should return width for end time', function () {
      var visStart = (0, _moment["default"])('2000-01-01 00:00:00 Z', 'YYYY-MM-DD H:m:s Z');
      var visEnd = (0, _moment["default"])('2000-01-08 00:00:00 Z', 'YYYY-MM-DD H:m:s Z'); // 7 days

      var timelineWidth = 2000; //2000 px

      var testTime = visEnd.clone();
      var pixels = (0, _timeUtils.getPixelAtTime)(testTime, visStart, visEnd, timelineWidth);
      (0, _chai.expect)(pixels).to.equal(timelineWidth);
    });
    it('should return greater than width for after end time', function () {
      var visStart = (0, _moment["default"])('2000-01-01 00:00:00 Z', 'YYYY-MM-DD H:m:s Z');
      var visEnd = (0, _moment["default"])('2000-01-08 00:00:00 Z', 'YYYY-MM-DD H:m:s Z'); // 7 days

      var timelineWidth = 2000; //2000 px

      var testTime = (0, _moment["default"])('2000-01-09 00:00:00 Z', 'YYYY-MM-DD H:m:s Z');
      var pixels = (0, _timeUtils.getPixelAtTime)(testTime, visStart, visEnd, timelineWidth);
      (0, _chai.expect)(pixels).to.gt(timelineWidth);
    });
    it('should return correct pixels for given fraction of time', function () {
      var visStart = (0, _moment["default"])('2000-01-01 00:00:00 Z', 'YYYY-MM-DD H:m:s Z');
      var visEnd = (0, _moment["default"])('2000-01-08 00:00:00 Z', 'YYYY-MM-DD H:m:s Z'); // 7 days

      var timelineWidth = 2000; //2000 px

      var testTime = (0, _moment["default"])('2000-01-04 12:00:00 Z', 'YYYY-MM-DD H:m:s Z');
      var expectedPixels = timelineWidth * (3.5 / 7);
      var pixels = (0, _timeUtils.getPixelAtTime)(testTime, visStart, visEnd, timelineWidth);
      (0, _chai.expect)(pixels).to.equal(expectedPixels);
    });
  });
  describe('getDurationFromPixels', function () {
    it('should return 0 for 0 pixels', function () {
      var visStart = (0, _moment["default"])('2000-01-01 00:00:00 Z', 'YYYY-MM-DD H:m:s Z');
      var visEnd = (0, _moment["default"])('2000-01-08 00:00:00 Z', 'YYYY-MM-DD H:m:s Z'); // 7 days

      var timelineWidth = 2000; //2000 px

      var pixelOffset = 0;
      var duration = (0, _timeUtils.getDurationFromPixels)(pixelOffset, visStart, visEnd, timelineWidth);
      (0, _chai.expect)(duration.asSeconds()).to.equal(0);
    });
    it('should return negative duration for -ve pixels', function () {
      var visStart = (0, _moment["default"])('2000-01-01 00:00:00 Z', 'YYYY-MM-DD H:m:s Z');
      var visEnd = (0, _moment["default"])('2000-01-08 00:00:00 Z', 'YYYY-MM-DD H:m:s Z'); // 7 days

      var timelineWidth = 2000; //2000 px

      var pixelOffset = -40;
      var duration = (0, _timeUtils.getDurationFromPixels)(pixelOffset, visStart, visEnd, timelineWidth);
      (0, _chai.expect)(duration.asSeconds()).to.lt(0);
    });
    it('should return (visible end - visible start) for width pixels', function () {
      var visStart = (0, _moment["default"])('2000-01-01 00:00:00 Z', 'YYYY-MM-DD H:m:s Z');
      var visEnd = (0, _moment["default"])('2000-01-08 00:00:00 Z', 'YYYY-MM-DD H:m:s Z'); // 7 days

      var timelineWidth = 2000; //2000 px

      var pixelOffset = 2000;
      var expectedDuration = visEnd.diff(visStart, 'seconds');
      var duration = (0, _timeUtils.getDurationFromPixels)(pixelOffset, visStart, visEnd, timelineWidth);
      (0, _chai.expect)(duration.asSeconds()).to.equal(expectedDuration);
    });
    it('should return higher than (visible end - visible start) for over width pixels', function () {
      var visStart = (0, _moment["default"])('2000-01-01 00:00:00 Z', 'YYYY-MM-DD H:m:s Z');
      var visEnd = (0, _moment["default"])('2000-01-08 00:00:00 Z', 'YYYY-MM-DD H:m:s Z'); // 7 days

      var timelineWidth = 2000; //2000 px

      var pixelOffset = 2400;
      var duration = (0, _timeUtils.getDurationFromPixels)(pixelOffset, visStart, visEnd, timelineWidth);
      (0, _chai.expect)(duration.asSeconds()).to.gt(_moment["default"].duration(7, 'days').asSeconds());
    });
    it('should return correct fraction of duration for given pixel location', function () {
      var visStart = (0, _moment["default"])('2000-01-01 00:00:00 Z', 'YYYY-MM-DD H:m:s Z');
      var visEnd = (0, _moment["default"])('2000-01-08 00:00:00 Z', 'YYYY-MM-DD H:m:s Z'); // 7 days

      var timelineWidth = 2100; //2000 px

      var pixelOffset = 300;
      var expectedDuration = pixelOffset / timelineWidth * 7 * 24 * 60 * 60;
      var duration = (0, _timeUtils.getDurationFromPixels)(pixelOffset, visStart, visEnd, timelineWidth);
      (0, _chai.expect)(duration.asSeconds()).to.equal(expectedDuration);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,