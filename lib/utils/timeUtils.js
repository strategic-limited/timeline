"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.timeSnap = timeSnap;
exports.pixelsPerMinute = pixelsPerMinute;
exports.getSnapPixelFromDelta = getSnapPixelFromDelta;
exports.getTimeAtPixel = getTimeAtPixel;
exports.getPixelAtTime = getPixelAtTime;
exports.getDurationFromPixels = getDurationFromPixels;

var _moment = _interopRequireDefault(require("moment"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

// Time utilities

/**
 * Snaps a moment object to the given resolution
 * @param {moment} time The moment to snap
 * @param {number} snapSeconds The snap time in seconds
 * @returns {moment} Snapped moment
 */
function timeSnap(time, snapSeconds) {
  if (snapSeconds === 0) {
    var newTime = time.clone();
    return newTime;
  }

  var newUnix = Math.round(time.unix() / snapSeconds) * snapSeconds;
  return (0, _moment["default"])(newUnix * 1000);
}
/**
 * Get the pixels per minute
 * @param {moment} vis_start The moment specifying the start of the visible timeline range
 * @param {moment} vis_end The moment specifying the end of the visible timeline range
 * @param {number} total_width The width of the timeline in pixels
 * @returns {float} The pixels per minute
 */


function pixelsPerMinute(vis_start, vis_end, total_width) {
  var start_end_min = vis_end.diff(vis_start, 'ms');
  return total_width / start_end_min;
}
/**
 *
 * @param {number} delta the delta distance in pixels
 * @param {moment} vis_start the visible start of the timeline
 * @param {moment} vis_end  the visible end of the timeline
 * @param {number} total_width  the pixel width of the timeline
 * @param {number} snapMinutes the number of minutes to snap to
 */


function getSnapPixelFromDelta(delta, vis_start, vis_end, total_width) {
  var snapMinutes = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
  var pixelsPerSnapSegment = pixelsPerMinute(vis_start, vis_end, total_width) * snapMinutes;
  return Math.round(delta / pixelsPerSnapSegment) * pixelsPerSnapSegment;
}
/**
 * Get the time at a pixel location
 * @param {number} pixel_location the pixel location (generally from left css style)
 * @param {moment} vis_start The visible start of the timeline
 * @param {moment} vis_end The visible end of the timeline
 * @param {number} total_width The pixel width of the timeline (row portion)
 * @param {number} snapMinutes The snap resolution (in mins)
 * @returns {moment} Moment object
 */


function getTimeAtPixel(pixel_location, vis_start, vis_end, total_width) {
  var snapMinutes = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
  var min_offset = pixel_location / pixelsPerMinute(vis_start, vis_end, total_width);
  var timeAtPix = vis_start.clone().add(min_offset, 'ms'); // if (snapMinutes !== 0) timeAtPix = timeSnap(timeAtPix, snapMinutes);

  return timeAtPix;
}
/**
 * Get the pixel location at a specific time
 * @param  {objects} time The time (moment) object
 * @param  {moment} vis_start The visible start of the timeline
 * @param  {moment} vis_end The visible end of the timeline
 * @param  {number} total_width The width in pixels of the grid
 * @returns {number} The pixel offset
 */


function getPixelAtTime(time, vis_start, vis_end, total_width) {
  var min_from_start = time.diff(vis_start, 'ms');
  return min_from_start * pixelsPerMinute(vis_start, vis_end, total_width);
}
/**
 * Returns the duration from the {@link vis_start}
 * @param  {number} pixels
 * @param  {moment} vis_start The visible start of the timeline
 * @param  {moment} vis_end The visible end of the timeline
 * @param  {number} total_width The width in pixels of the grid
 * @returns {moment} Moment duration
 */


function getDurationFromPixels(pixels, vis_start, vis_end, total_width) {
  var start_end_min = vis_end.diff(vis_start, 'ms');
  if (start_end_min === 0) return _moment["default"].duration(0, 'ms');
  var pixels_per_min = total_width / start_end_min;
  var mins = pixels / pixels_per_min;
  return _moment["default"].duration(mins, 'ms');
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,